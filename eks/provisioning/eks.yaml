AWSTemplateFormatVersion: 2010-09-09

Parameters:

  NumWorkerNodes:
    Type: Number
    AllowedValues:
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
    - 8
    Description: "Number of worker nodes to create"
    Default: 2

  WorkerNodesInstanceType:
    Type: String
    AllowedValues:
    - t2.micro
    - t2.small
    - t3.medium
    Description: "EC2 instance type for the worker nodes"
    Default: t2.small

  WorkerNodesDiskSize:
    Type: Number
    AllowedValues:
    - 5
    - 10
    - 15
    - 20
    Description: "Disk size on each worker node"
    Default: 10

  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "Name of an existing EC2 key pair"




Resources:

  VPCStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        NumberOfAZs: 2
        BuildPrivateSubnets: False
        StackName: !Sub "${AWS::StackName}-vpc"
      TemplateURL: "https://cf-templates-1apaeyme0v0mq-us-east-1.s3.amazonaws.com/vpc.yaml"


  ControlPlaneRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
            Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy


  ControlPlane:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Sub "${AWS::StackName}-eks-cluster"
      Version: "1.18"
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref ControlPlaneSecurityGroup
        SubnetIds:
          - Fn::GetAtt:
            - VPCStack
            - Outputs.PublicSubnetAId
          - Fn::GetAtt:
            - VPCStack
            - Outputs.PublicSubnetBId
      RoleArn: !GetAtt ControlPlaneRole.Arn


  # control plane security group and ingress/egress rules
  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for the elastic network interfaces between the control plane and the worker nodes"
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-eks-controlplane-sg"
      VpcId: 
        Fn::GetAtt:
        - VPCStack
        - Outputs.VpcId

  ControlPlaneIngressFromWorkerNodesHttps:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "Allow incoming HTTPS traffic (TCP/443) from worker nodes (for API server)"
      GroupId: !Ref ControlPlaneSecurityGroup
      SourceSecurityGroupId: !Ref WorkerNodesSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443

  ControlPlaneEgressToWorkerNodesKubelet:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: "Allow outgoing kubelet traffic (TCP/10250) to worker nodes"
      GroupId: !Ref ControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref WorkerNodesSecurityGroup
      IpProtocol: tcp
      FromPort: 10250
      ToPort: 10250

  ControlPlaneEgressToWorkerNodesHttps:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: "Allow outgoing HTTPS traffic (TCP/443) to worker nodes (for pods running extension API servers)"
      GroupId: !Ref ControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref WorkerNodesSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443



  # worker nodes security group
  WorkerNodesSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for all the worker nodes"
      VpcId:
        Fn::GetAtt:
        - VPCStack
        - Outputs.VpcId
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-eks-workergroup-sg"
        - Key: !Sub "kubernetes.io/cluster/${ControlPlane}"
          Value: "owned"

  WorkerNodesIngressFromWorkerNodes:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "Allow all incoming traffic from other worker nodes"
      GroupId: !Ref WorkerNodesSecurityGroup
      SourceSecurityGroupId: !Ref WorkerNodesSecurityGroup
      IpProtocol: "-1"

  WorkerNodesIngressFromControlPlaneKubelet:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "Allow incoming kubelet traffic (TCP/10250) from control plane" 
      GroupId: !Ref WorkerNodesSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 10250
      ToPort: 10250

  WorkerNodesIngressFromControlPlaneHttps:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "Allow incoming HTTPS traffic (TCP/443) from control plane (for pods running extension API servers)"
      GroupId: !Ref WorkerNodesSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  WorkerNodesInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref WorkerNodesRole

  WorkerNodesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service:
              - ec2.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  Nodegroup:
    Type: AWS::EKS::Nodegroup
    DependsOn: ControlPlane
    Properties:
      AmiType: AL2_x86_64
      ClusterName: !Sub "${AWS::StackName}-eks-cluster"
      DiskSize: !Ref WorkerNodesDiskSize
      InstanceTypes:
      - !Ref WorkerNodesInstanceType
      NodeRole: !GetAtt WorkerNodesRole.Arn
      NodegroupName: !Sub "${AWS::StackName}-nodegroup"
      RemoteAccess:
        Ec2SshKey: !Ref KeyPairName
        # SourceSecurityGroups:
      ScalingConfig:
        DesiredSize: !Ref NumWorkerNodes
      Subnets:
      - Fn::GetAtt:
        - VPCStack
        - Outputs.PublicSubnetAId
      - Fn::GetAtt:
        - VPCStack
        - Outputs.PublicSubnetBId
      Version: "1.18"

Outputs:

  WorkerNodesRoleArn:
    # Needed for the last step "enable worker nodes to join the cluster":
    # https://docs.aws.amazon.com/eks/latest/userguide/getting-started.html#eks-create-cluster
    Description: ARN of the worker nodes role
    Value: !GetAtt WorkerNodesRole.Arn
