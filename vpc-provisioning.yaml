AWSTemplateFormatVersion: 2010-09-09

Parameters:
  # specify amount of AZs
  NumberOfAZs:
    Type: Number
    AllowedValues:
    - 2
    - 3
    Default: 2
    Description: "How many Availability Zones do you wish to utilize?"
  # determine if VPC should contain private subnets
  BuildPrivateSubnets:
    Type: String
    AllowedValues:
    - True
    - False
    Default: True
    Description: "Do you want to create private subnets?"


Conditions:
  BuildSubnetC: !Equals [ !Ref NumberOfAZs, 3 ]
  BuildPrivateSubnets: !Equals [ !Ref BuildPrivateSubnets, True ]
  BuildPrivateSubnetC: !And [ Condition: BuildPrivateSubnets, Condition: BuildSubnetC ]


Resources:

  # define VPC itself
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.10.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-vpc


  # define internet gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-internet-gateway

  # bind gateway with vpc
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    # both resources should be already defined!
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway


  # define public subnets first in every case
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.10.10.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]    
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-public-subnet-A

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.10.20.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]  
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-public-subnet-B

  # creation of this subnet depends of AZs amount
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Condition: BuildSubnetC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.10.30.0/24
      AvailabilityZone: !Select [ 2, !GetAZs ] 
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-public-subnet-C

  # private subnets only in case 'BuildPrivateSubnets' resource is set to true
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Condition: BuildPrivateSubnets
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.10.40.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-private-subnet-A

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Condition: BuildPrivateSubnets
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.10.50.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-private-subnet-B

  # creation of this subnet depends of AZs amount as well as on 'BuildPrivateSubnets' param
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Condition: BuildPrivateSubnetC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.10.60.0/24
      AvailabilityZone: !Select [ 2, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-private-subnet-C


  # define NAT gateway
  NATGateway:
    Type: AWS::EC2::NatGateway
    Condition: BuildPrivateSubnets
    Properties:
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-nat-gateway

  # define EIP
  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Condition: BuildPrivateSubnets
    Properties:
      Domain: vpc
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-elastic-ip


  # define route tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-public-route-table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: BuildPrivateSubnets
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-private-route-table

  # define routes
  # 0.0.0.0/0 -> InternetGateway
  PublicRouteA:   
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway  
  # 0.0.0.0/0 -> NATGateway
  PrivateRouteA:            
    Type: AWS::EC2::Route
    Condition: BuildPrivateSubnets
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway


  # associate route tables with subnets
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildSubnetC
    Properties:
      SubnetId: !Ref PublicSubnetC
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPrivateSubnets
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPrivateSubnets
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPrivateSubnetC
    Properties:
      SubnetId: !Ref PrivateSubnetC
      RouteTableId: !Ref PrivateRouteTable


